// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Announcement {
  id String @id @default(cuid()) // 32 karakter by default
  // id Int @id @default(autoincrement()) // id nya number terus autoincrement
  title String
  detail String
  createdAt DateTime @default(now()) // ini tadi nya annoucementDate
  updatedAt DateTime @updatedAt
}

enum Gender {
  Male
  Female
}

enum Role {
  Student
  Mentor
}

model User {
  id String @id @default(cuid())
  role Role
  student Student?
  mentor Mentor?
  profilePicture ProfilePicture? @relation(fields: [profilePictureId], references: [id])
  profilePictureId String?
  name String
  phoneNumber String @unique
  email String @unique
  password String
  birthday DateTime
  gender Gender
  forum Forum[]
  comment Comment[]

  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
}

model ProfilePicture {
  id String @id @default(cuid())
  name String
  path String
  mimetype String
  user User?

  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
}

model Student {
  id String @id @default(cuid())
  attendance Int @default(0)
  expPoint Int @default(0)
  badge Int @default(0)
  courses CourseStudent[]
  user User? @relation(fields: [userId], references: [id])
  userId String @unique


  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
}

model Mentor {
  id String @id @default(cuid())
  rating Int @default(0)
  courses Course[]
  user User? @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
}

model Course {
  id String @id @default(cuid())
  dateStart DateTime
  dateEnd DateTime
  courseType String
  room String?
  linkClass String?
  currentCapacity Int
  classCapacity Int
  mentor Mentor @relation(fields: [mentorId], references: [id])
  mentorId String
  students CourseStudent[]

  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
}

model CourseStudent {
  studentId String
  courseId String
  student Student @relation(fields: [studentId], references: [id])
  course Course @relation(fields: [courseId], references: [id])
  @@id([studentId, courseId])
}

model Forum {
  id String @id @default(cuid())
  title String
  tag String
  message String
  comment Comment[]
  upload ForumUpload? @relation(fields: [uploadId], references: [id])
  uploadId String? @unique
  user User @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id String @id @default(cuid())
  message String
  like Int
  dislike Int
  forum Forum @relation(fields: [forumId], references: [id])
  forumId String
  upload ForumUpload? @relation(fields: [uploadId], references: [id])
  uploadId String? @unique
  user User @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
}

model ForumUpload {
  id String @id @default(cuid())
  name String
  path String
  mimetype String
  forum Forum?
  comment Comment?

  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt
}